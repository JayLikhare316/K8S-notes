TOPICS TO LEARN 

Core Concepts: 
Monolithic vs MicroServices, Kubernetes Architecture, Setup on Local/AWS EC2, kubectl, Pods, Namespaces, Labels ,
Selectors, Annotations 

Workloads:
Deploymnets, StatefulSets, Daemonsets, ReplicaSets, Jobs, CronJobs

Networking:
Cluster Networking, Services, Ingress, Network Policies

Storage:
persistent volume (PV), persistent volume claims (PVC), StorageClasses, ConfigMaps, Secrets 

Scaling and Scheduling:
HPA, VPA, Node Affinity, Taints and Toleration, Resource Quotas, Limit , Probes 

Cluster Administration:
RBAC, Cluster upgrade, Custom Resource Definitions (CRDs)

Monitoring and Logging:
Metrics server, Monitoring tools, Logging tools, Prometheus, Grafana, ELK Stack

Advanced Features:
Operators, Helm, Service Mesh, Kubernetes API

Security:
Pod security Standards (PSS), Image Scanning, Network Policies, Secret Encryption, Network Policies, RBAC

Cloud-Native Kubernetes:
managed Services(EKS, AKS, GKE), Cluster Autoscaler, Spot/Preemptible Nodes.

Debugging and Troubleshooting:
kubectl debugging, Logs, Resource Usage analysis

#############################################################################

Creating Ways of Kubernetes Cluster 
1.kubeadm
2.Minikube (local/ec2)
3.KIND Cluster (kubernetes in docker)
4.EKS/AKS/GKE 

#################################################################################
 
 
 ###Install and  Creating Cluster WITH KIND 
1. Create a bash file 

#!/bin/bash
[ $(uname -m) = x86_64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
chmod +x ./kind
sudo cp ./kind /usr/local/bin/kind

VERSION="v1.30.0"
URL="https://dl.k8s.io/release/${VERSION}/bin/linux/amd64/kubectl"
INSTALL_DIR="/usr/local/bin"

curl -LO "$URL"
chmod +x kubectl
sudo mv kubectl $INSTALL_DIR/
kubectl version --client

rm -f kubectl
rm -rf kind

echo "kind & kubectl installation complete."

2. chmod +x bash file
3. run the file 
4. sudo yum install docker 
5. sudo systemctl start docker && sudo systemctl enable docker 
6. sudo usermod -aG docker $USER && newgrp docker
7. mkdir kind-cluster
8.cd kind-cluster
9. vim config.yaml 

kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4

nodes:
- role: control-plane
- role: worker
- role: worker
  extraPortMappings:
  - containerPort: 80
    hostPort: 80
    protocol: TCP
  - containerPort: 443
    hostPort: 443
    protocol: TCP

10. kind create cluster --name=demo-cluster --config=config.yaml   #---> this will create a cluster with 3 nodes
11. kubectl cluster-info --context demo-cluster      #---> to see the cluster info

###################################################################################################################

## Install and Creating Cluster With Minicube 
1. mkdir minicube-cluster
2. cd minicube-cluster
3. sudo yum install -y curl wget apt-transport-https
4. sudo yum install -y docker.io
5. sudo systemctl enable --now docker
6. sudo usermod -aG docker $USER && newgrp docker
7. curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
8. chmod +x minikube
9. sudo mv minikube /usr/local/bin/
10. curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
11. chmod +x /kubectl
12. sudo mv /kubectl /usr/local/bin/
13. minikube start --driver=docker --vm=true 
14. kubectl cluster-info --context=minikube

#########################################################################################################

### Install and creating a cluster with kubeadm

#You would need 2 instances/nodes 1.master 2. worker worker nodes can be multiple 
#EXPOSE port 6443 on security groups of EC2

1. sudo swapoff -a     #---> command on both EC2 
2.                      #---> command on both EC2
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF
sudo modprobe overlay
sudo modprobe br_netfilter
3.                        #---> command on both EC2
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF
sudo sysctl --system
lsmod | grep br_netfilter
lsmod | grep overlay
4.                                      #---> command on both EC2
sudo yum update
sudo yum install -y ca-certificates curl
sudo install -m 0755 -d /etc/apt/keyrings
sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
sudo chmod a+r /etc/apt/keyrings/docker.asc
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo yum update
sudo yum install -y containerd.io
containerd config default | sed -e 's/SystemdCgroup = false/SystemdCgroup = true/' -e 's/sandbox_image = "registry.k8s.io\/pause:3.6"/sandbox_image = "registry.k8s.io\/pause:3.9"/' | sudo tee /etc/containerd/config.toml
sudo systemctl restart containerd
sudo systemctl status containerd
5.                              #---> command on both EC2
sudo yum update
sudo yum install -y apt-transport-https ca-certificates curl gpg
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo yum update
sudo yum install -y kubelet kubeadm kubectl
sudo yum-mark hold kubelet kubeadm kubectl
6. sudo kubeadm init     #---> command on one EC2 (master node)
7.                        #---> command on one EC2 (master node)
 mkdir -p "$HOME"/.kube
 sudo cp -i /etc/kubernetes/admin.conf "$HOME"/.kube/config
 sudo chown "$(id -u)":"$(id -g)" "$HOME"/.kube/config
8.kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.0/manifests/calico.yaml    #---> command on master node
9.kubeadm token create --print-join-command #---> command on master node
####it will generate a token to join the worker nodes to the cluster copy the token 
10. sudo kubeadm reset pre-flight checks    #---> command on worker node
11. sudo kubeadm join <private-ip-of-control-plane>:6443 --token <token> --discovery-token-ca-cert-hash sha256:<hash> --cri-socket 
"unix:///run/containerd/containerd.sock" --v=5        #---> command on worker node paste the token here 


###########################################################################################

container --> pod --> deployment --> service --> user 

# How to create a namespace 

1. kubectl create ns nginx-ns
2. kubectl run nginx --image=nginx -n nginx-ns    #---> create a pod through CMD in the namespace
3. kubectl get pods -n nginx-ns      #---> to see pods in the namespace
4. kubectl get pods -n nginx-ns -o wide     #---> to see pods in the namespace with more details

# how to enter in pod
1. kubectl exec -it pod/nginx-pod -n nginx-ns -- bash 
z
2.kubectl describe pod nginx-pod -n nginx-ns  #---> to see the details of the pod

## ReplicaSet/ StatefulSet /Deployment

kubectl scale deployment/nginx-deploy -n nginx-ns --replicas=5 #---> to scale the deployment

##syntax 
 kubectl scale deployment/(name-of-deployment) -n (name-of-namespace) --replicas=(number-of-replicas)

kubectl set image deployment/nginx-deployment -n nginx-ns nginx-container=nginx:1.26.3   #---> to update the image of the deployment
##syntax
kubectl set image deployment/(deploy-name) -n (namespace-name) (container-name)=image-name:tag  
kubectl rollout status deployment/nginx-deployment -n nginx-ns  #---> to check the status
kubectl rollout history deployment/nginx-deployment -n nginx-ns  #---> to check the history
kubectl rollout undo deployment/nginx-deployment -n nginx-ns  #---> to undo the last deployment
kubectl rollout undo deployment/nginx-deployment -n nginx-ns --to-revision=1  #---> to undo to a specific revision
kubectl rollout pause deployment/nginx-deployment -n nginx-ns  #---> to pause the deployment
kubectl rollout resume deployment/nginx-deployment -n nginx-ns  #---> to resume the deployment

## DaemonSets
daemonsets unsure krta hain ki har ek node me ek pod run krta rahe

##
kubectl get job      #---> to see all jobs
kubectl get job -n nginx-ns  #---> to see all jobs in a specific namespac
kubectl get job -n nginx-ns -o wide  #---> to see all jobs in a specific namespace with more details
##
kubectl logs pod/(name-of-pod-created) -n nginx-ns #---> to see the logs of the po
##
kubectl get cronjobs -n nginx-ns    #---> to see all cronjobs in a specific namespace
kubectl get cronjobs -n nginx-ns -o wide  #---> to see all cron

## Storage classes
kubectl get sc      #---> to see all storage classes
kubectl get sc -n nginx-ns  #---> to see all storage classes in a specific namespace
kubectl get sc -n nginx-ns -o wide  #---> to see all storage classes in a specific namespace with more details

#type of storage classes
1. local
2. ceph
3. csi

kubectl get pv    #---> to see all persistent volumes
kubectl get pv -n nginx-ns  #---> to see all persistent volumes in a specific namespace
kubectl get pv -n nginx-ns -o wide  #---> to see all persistent volumes in a specific namespace with more details 

kubectl get all    #---> to see all resources in the cluster
kubectl get all -n nginx-ns  #---> to see all resources in a specific namespace

kubectl get svc    #---> to see all services
kubectl get svc -n nginx-ns  #---> to see all services in a specific namespace
kubectl get svc -n nginx-ns -o wide  #---> to see all services in wide 

kubectl port-forward service/nginx-service -n nginx-ns 80:80 --address=0.0.0.0    #---> to forward the port of the service
#syntax
kubectl port-forward service/(service-name) -n (namespac) (local-port):(remote-port) --address=0.0.0.0

# What is ingress?
Ingress exposes HTTP and HTTPS routes from outside the cluster to services within the cluster. Traffic routing is controlled by rules defined on the Ingress resource

client -> ingress managed LB -> routing rule -> service -> pods
                                                        -> pods 


kubectl apply -f https://kind.sigs.k8s.io/examples/ingress/deploy-ingress-nginx.yaml   #---> to deploy ingress nginx
kubectl get ingress -n nginx-ns  #---> to see all ingress in a specific namespace


##Probe (request)

1.liveness probe
2.readiness probe
3.startup probe


## Taints/Tolerations

Taints: Mark a node as tainted, so that pods cannot be scheduled on it unless they have the matching tolerance

Tolerations: Allow a pod to be scheduled on a tainted node, if it has the matching tolerance


