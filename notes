## K8S

Q.What is kubernetes?

- an open-source container orchestration system for automating the deployment, scaling, and management of container
- it was originally designed by google, and is now maintained by the cloud native computing foundation
- it allows for the deployment of applications and services in a scalable and highly available manner
- it provides a lot of features such as self-healing, load balancing, and resource management
- it is widely used in cloud computing and enterprise environments
- it is also used in edge computing and IoT environments
- it is a complex system that requires a lot of knowledge and expertise to use
- it is a multi-cloud platform that can run on multiple cloud providers such as AWS, GCP
- it is a hybrid cloud platform that can run on-premises and in the cloud

Q.Architecture of kubernetes?

- it consists of a control plane and a data plane
- the control plane is responsible for managing the cluster and making decisions
- the data plane is responsible for running the applications and services
- the control plane consists of the following components:
- api server: responsible for exposing the kubernetes api
- controller manager: responsible for managing the state of the cluster
- scheduler: responsible for scheduling pods onto nodes
- etcd: responsible for storing the state of the cluster
- the data plane consists of the following components:

Q. What are nodes in k8s ?
- a node is a machine or a virtual machine that runs a pod[ec2 instances, VMs ,Containers]
- a node can be a physical machine or a virtual machine

Q. What is control plane?
- the control plane is the component of the kubernetes cluster that is responsible for managing the cluster and
making decisions
- it consists of the following components:
- api server
- controller manager
- scheduler
- etcd
- it is responsible for managing the state of the cluster and making decisions
- it is the brain of the kubernetes cluster
- it is responsible for scheduling pods onto nodes
- it is responsible for managing the lifecycle of pods
- it is responsible for managing the resources of the cluster
- it is responsible for managing the security of the cluster
- it is responsible for managing the networking of the cluster
- it is responsible for managing the storage of the cluster
- it is responsible for managing the monitoring of the cluster
- it is responsible for managing the logging of the cluster
- it is responsible for managing the alerting of the cluster
- it is responsible for managing the backup and restore of the cluster
- it is responsible for managing the upgrade and patching of the cluster
- it is responsible for managing the compliance of the cluster
- it is responsible for managing the governance of the cluster


Q.What are the pods?
- a pod is the basic execution unit in kubernetes
- a pod is a logical host for one or more containers
- a pod is a group of one or more containers that are run on a node and share resources

Q.Difference between kubelet and kubeproxy?

=========================================================================================================================================================================
| Aspect	        |                         Kubelet                                          |       Kube-proxy                                                         |
|-----------------|--------------------------------------------------------------------------|---------------------------------------------------------------------------
| Purpose	        | Manages containers and pods on a node.            	    7                 | Manages network rules and traffic routing for services.                  |
| Scope           | Node-level: Focuses on running containers and pods on a single node.	   | Network-level: Focuses on enabling communication between pods/services.  |
| Interaction	    | Works with the container runtime (e.g., Docker, containerd).	           | Works with network rules (e.g., IP tables, IPVS).                        |
| Responsibility	| Ensures containers are running as per PodSpecs.	                         | Ensures traffic is routed correctly to pods based on Service definitions.|
| Dependency	    | Directly interacts with the Kubernetes API server and container runtime. | Relies on the Kubernetes API server for Service and Endpoint updates.    |
=========================================================================================================================================================================

## Creation Of cluster:-[kubernetes]

launch an ec2 instance --> with admin role
install kubectl on ec2 instance --> from AWS
curl -O ############
chmod -x ./kubectl


eksctl create cluster --name irondome -node-type t2.medium --nodes 2 --region=us-east-1
kubectl get nodes --> to get nodes

pod 
rs 
deploy

services: 
  lb
  np -->nide port
  cip -->cluster ip

config:
  services
  cmp

resources:-


## Manifest syntax:-{interview question}

apiVersion: v1
kind: Pod
metadata:
  name: nginx
spec:
  containers:
  - name: nginx
    image: nginx:1.14.2
    ports:
    - containerPort: 80


client cluster can work on maximum -2 version ,if not you have to update the cluster. industry standards is -1.
alias k=kubectl -->to change the name of kubectl to k.

>>>task :- how to set permanent alias

k get pods -A --> to see all pods 
vim pod.yaml --> menifest file
k apply -f pod.yaml --> to apply menifest
k get po --> small commands to see pods
k describe po nginx --> to describe pods nginx

>>>task
need to perform lamp server.
